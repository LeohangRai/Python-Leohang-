#Lists in Python
In Python programming, a list is created by placing all the items (elements) inside a square bracket [ ], 
separated by commas.

Lists contain Mutable(changable) pieces of data.
List can have any data type as an element.
li = [123, "Leo", True]

A list can even have a list  inside it as an item (Multi-Dimensional List)
lis = [[1,2], [3,4]]


Length of a List:
len(listname)

Indexing:
listname[index]

#Slicing in List
li = [1, 2, 11, 3, 4, 5, 6, 7, 8]
print(li[0:-1:2])  #Prints the list items from 0 to second last by 2 steps per index increment
>[1, 11, 4, 6]

print(li[::2]) #prints all items by step 2
>[1, 11, 4, 6, 8]


#Reversing a list
li = [1, 2, 11, 3, 4, 5, 6, 7, 8]
print(li[::-1])
[8, 7, 6, 5, 4, 3, 11, 2, 1]


Replacing items:
li = [1,3.14, "Leo", True]
li[2:4] = ["Shizen", False]

Inserting items without replacing:
li = [1,3.14, "Leo", True]
li[2:2] = ["Shizen"] #inserts "Shizen at index 2" and places the original item ("Leo") to index 3
li[2:2] = ["Shizen", 4] # inserts "Shizen" at index 2 and  at the next index


Insert() function in lists:
insert(index, value)

Example:
l1=[1,3.14, "Leo", True]
l1.insert(2,"Shizen")   #will insert an iterm "Shizen" at index 2


NOTE: 
li[2:2] is more efficient than li.insert(2,"Shizen") because li[] can even insert more than 1 item
starting from the index defined.

#Inserting a new list at the end or start of an original list
listname = listname + [new list items]
listname = [new list items] + listname

Example:
li = [1,2,3,4]
li = li + [5,6,7,8]
print(li)
> [1, 2, 3, 4, 5, 6, 7, 8]

li = [-1, 0] + li
print(li)
> [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]

#Removing items from a list:
#Remove(), pop() and clear() functions in Lists:
remove(itemname)   - removes the specified item
pop(index)	-removes and returns the item of specified index. Last item is popped if no arg passed.
clear()		-removes all the items from the list


Example:
li = [1,3.14, "Leo", True]
li.pop(3)  #will pop the item at index 3 i.e. True
li.remove("Leo")  #will remote the item "Leo"
print(li)
>[1, 3.14]



#Multi-Dimensional List(Nested List):
List within a list

lis = [[1,2], [3,4]]

Indexing in nested list:
listname[findex][eindex]

findex is the index of the element in the main list
and eindex is the index of the items in the successive list
If there is another list within the nested list, then another [index] is used for that one

Example:
lis = [[a,b], [c,d]]
lis[0][0] > a
lis[0][1] > b
lis[1][0] > c
lis[1][1] > d


Nested inside a nested list:

lis = [ [ ['a','b'],['c','d'] ], [ ['e','f'],['g','h'] ] ]

lis[0][0][0] > a
lis[1][1][1] > h

Check if an item exists or not in a list:
use the 'in' keyword
'not in' for the negation

Example:
lis = [1,3.14, "Leo", True] 
"Leo" in lis
True in lis
3.14 not in lis


#Checking the min and the max valued item in the list
Note: all the items in the list should be of the same data type (Other it will throw a TypeError)
Can be done on both integers as well as characters(strings):

min()
max()



#Adding items to the list:
append()
extend()

#listname.append() 
-adds a new item(single) to the end of the list. Takes only 1 arg,, i.e. the item to be inserted.
-If another list is passed as an arg, the function adds the whole list into the original list aby nesting.

#Examples:
numbers=[1,2,3,4,5,6,7,8,9]
numbers.append(10)    
print(numbers)
>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#append() another list to a list
numbers=[1,2,3,4,5,6,7,8,9]
words=['a','b','c','d']
numbers.append(words)         
print(numbers)
>[1, 2, 3, 4, 5, 6, 7, 8, 9, ['a', 'b', 'c', 'd']]

#listname.extend()   
- for bulk adding.  
- takes a single argument (a list) and adds it to the end.
- extends the list by adding all items of a list (passed as an argument) to the end.
- can also add elements of other native datatypes (like tuple and set) to the list

#Examples:
language1 = ['French', 'English', 'German']
language2 = ['Spanish', 'Portuguese']
language1.extend(language2)
print(language1)
>['French', 'English', 'German', 'Spanish', 'Portuguese']


#extend() another native data typte to a list:
#Add elements of tuple and sets to a list
language = ['French', 'English', 'German']
language_tuple = ('Spanish', 'Portuguese')
language_set = {'Chinese', 'Japanese'}
language.extend(language_tuple)
language.extend(language_set)
print(language)

>['French', 'English', 'German', 'Spanish', 'Portuguese', 'Japanese', 'Chinese']



Note:
We can aslo add items of another list to a list by using + or += operator.
Example:
a = [1, 2]
b = [3, 4]
a += b
print(a)
>[1,2,3,4]


#Organizing a list:

#Sorting:


sort() 
- sorts the items in ascending order, by default
- to sort in descending order, set reverse = True 	

Examples:
lis = [10,3,4,6,0,32,1]
lis.sort()
print(lis)
>[0, 1, 3, 4, 6, 10, 32]

lis2 = ['f','a','r','h','y','p']
lis2.sort()
print(lis2)
>['a', 'f', 'h', 'p', 'r', 'y']